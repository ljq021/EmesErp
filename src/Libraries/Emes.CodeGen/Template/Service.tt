<#@ template language="C#" hostSpecific="true" debug="false" #>
<#@ output extension=".cs" #>
<#
        DefaultHost host = (DefaultHost)(Host);
        var designer = host.Designer;
#>
#region Copyright
//======================================================================
//        Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.
//        Copyright (c)  anber<shuangyan_m@hotmail.com> All rights reserved.
//        NOTE: 当前文件是由工具自动生成，修改、覆盖请谨慎.
//        The current file is automatically generated by the tool. Be careful to modify or overwrite it.
//======================================================================
#endregion
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Emes.Core;
using Emes.Core.Data;
using Emes.Erp.I<#=designer.Module#>;
using Emes.Erp.I<#=designer.Module#>.Dtos.<#=designer.Codes#>;
using Emes.Erp.<#=designer.Module#>.Models;
using Surging.Core.AutoMapper;
using Surging.Core.CPlatform.Exceptions;
using Surging.Core.CPlatform.Ioc;
using Surging.Core.CPlatform.Runtime.Server.Implementation.ServiceDiscovery.Attributes;
using Surging.Core.ProxyGenerator;

namespace Emes.Erp.<#=designer.Module#>.Implementation
{
    [ModuleName("<#=designer.Code#>")]
    public class <#=designer.Code#>Service : ProxyServiceBase, I<#=designer.Code#>Service
    {
        private readonly IRepository<<#=designer.Code#>> _<#=designer.CamelCaseCode#>Repository;
        public <#=designer.Code#>Service(IRepository<<#=designer.Code#>> <#=designer.CamelCaseCode#>Repository
            )
        {
            _<#=designer.CamelCaseCode#>Repository = <#=designer.CamelCaseCode#>Repository;
        }
        /// <summary>
        /// 创建<#=designer.Name#>
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public async Task<<#=designer.Code#>Dto> Create(Create<#=designer.Code#>Dto request)
        {
            if (!request.IsValid())
            {
                throw new ValidateException(request.Message());
            }
            var <#=designer.CamelCaseCode#> = request.MapTo<<#=designer.Code#>>();
            await  _<#=designer.CamelCaseCode#>Repository.Add(<#=designer.CamelCaseCode#>);
            return <#=designer.CamelCaseCode#>.MapTo<<#=designer.Code#>Dto>();
           
        }

        /// <summary>
        /// 删除<#=designer.Name#>
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public async Task<<#=designer.Code#>Dto> Delete(Delete<#=designer.Code#>Dto request)
        {
            if (!request.IsValid())
            {
                throw new ValidateException(request.Message());
            }
            var <#=designer.CamelCaseCode#> = await _<#=designer.CamelCaseCode#>Repository.GetById(request.Id);
            if (<#=designer.CamelCaseCode#> == null)
            {
               throw new BusinessException(ExceptionMessage.NotFound);
            }
            await _<#=designer.CamelCaseCode#>Repository.Remove(<#=designer.CamelCaseCode#>);
            return <#=designer.CamelCaseCode#>.MapTo<<#=designer.Code#>Dto>();
        }

        /// <summary>
        /// 根据Id获取<#=designer.Name#>
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public async Task<<#=designer.Code#>Dto> GetById(long id)
        {

            var <#=designer.CamelCaseCode#> = await _<#=designer.CamelCaseCode#>Repository.GetById(id);
            if (<#=designer.CamelCaseCode#> == null)
            {
                throw new BusinessException(ExceptionMessage.NotFound);
            }
            return <#=designer.CamelCaseCode#>.MapTo<<#=designer.Code#>Dto>();

        }

        /// <summary>
        /// 查询<#=designer.Name#>列表
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public Task<IEnumerable<<#=designer.Code#>Dto>> Query(Query<#=designer.Code#>Dto request)
        {
            var query = _<#=designer.CamelCaseCode#>Repository.Query.ToList();
           
            return Task.FromResult(query.MapTo<<#=designer.Code#>Dto>());
        }

        /// <summary>
        /// 更新<#=designer.Name#>
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public async Task<<#=designer.Code#>Dto> Update(Update<#=designer.Code#>Dto request)
        {
            if (!request.IsValid())
            {
                throw new ValidateException(request.Message());
            }
            var <#=designer.CamelCaseCode#> = await _<#=designer.CamelCaseCode#>Repository.GetById(request.Id);
            if (<#=designer.CamelCaseCode#> == null)
            {
                throw new BusinessException(ExceptionMessage.NotFound);
            }
            <#=designer.CamelCaseCode#> = request.MapTo(<#=designer.CamelCaseCode#>);
            await _<#=designer.CamelCaseCode#>Repository.Update(<#=designer.CamelCaseCode#>);
            return <#=designer.CamelCaseCode#>.MapTo<<#=designer.Code#>Dto>();
        }
    }
}